import numpy as np

def ProjectionCheck(Ps1, Ps2):
    # Initialize the index array
    index = np.zeros(Ps1.shape[2])

    # Set V20 and V to np.nan as requested
    V20 = np.array([[1.5898060e-01, 2.5575726e-01, 9.5357925e-01]
        ,[-2.3055723e-01,-2.6400265e-01, 9.3656071e-01]
        ,[ 4.1398600e-01,-2.0098550e-01, 8.8781778e-01]
        ,[-4.3095768e-01, 2.2854897e-01, 8.7294951e-01]
        ,[ 6.8459221e-02,-6.6474009e-01, 7.4393142e-01]
        ,[-2.3952985e-01, 6.9086627e-01, 6.8215046e-01]
        ,[ 4.0670283e-01, 6.2320521e-01, 6.6798808e-01]
        ,[-7.6845334e-01,-1.6222626e-01, 6.1900090e-01]
        ,[ 8.1930571e-01,-1.1535205e-01, 5.6163338e-01]
        ,[-4.6915854e-01,-6.9757192e-01, 5.4155671e-01]
        ,[ 5.3482445e-01,-6.9395813e-01, 4.8206319e-01]
        ,[-7.7428380e-01, 4.3490405e-01, 4.5972064e-01]
        ,[ 8.1475824e-01, 3.9406225e-01, 4.2530453e-01]
        ,[ 5.3132525e-02, 9.4780043e-01, 3.1440624e-01]
        ,[ 9.4421939e-03,-9.6626770e-01, 2.5736662e-01]
        ,[-8.5149076e-01,-4.9931730e-01, 1.6014285e-01]
        ,[-4.8432943e-01, 8.6588061e-01, 1.2520294e-01]
        ,[ 8.6117387e-01,-4.9715706e-01, 1.0589818e-01]
        ,[ 5.1985994e-01, 8.5134516e-01, 7.0406398e-02]
        ,[-9.9857141e-01, 4.5136960e-03, 5.3242569e-02]])
    

    V = np.array([[2.8627052e-02, 3.4021715e-02, 9.9901102e-01]
        ,[ 5.0919506e-03,-2.1674837e-01, 9.7621423e-01]
        ,[-2.2361930e-01,-7.4498163e-02, 9.7182531e-01]
        ,[ 2.6329136e-01,-5.6403097e-02, 9.6306612e-01]
        ,[-2.0568999e-01, 1.9120208e-01, 9.5975694e-01]
        ,[ 3.9445520e-02, 2.7931841e-01, 9.5938797e-01]
        ,[ 2.7780230e-01, 2.1484271e-01, 9.3630577e-01]
        ,[ 2.3072793e-01,-3.2039378e-01, 9.1875592e-01]
        ,[-2.4083601e-01,-3.2731808e-01, 9.1370722e-01]
        ,[-4.2915470e-01, 7.3896264e-02, 9.0020308e-01]
        ,[-3.3111036e-03,-4.6311717e-01, 8.8629088e-01]
        ,[-1.3467025e-01, 4.5348274e-01, 8.8103197e-01]
        ,[ 4.9595959e-01, 4.8900038e-02, 8.6696763e-01]
        ,[-4.5967749e-01,-1.9358392e-01, 8.6673056e-01]
        ,[ 1.5296475e-01, 4.7954409e-01, 8.6408289e-01]
        ,[ 4.7178698e-01,-1.9874740e-01, 8.5902067e-01]
        ,[-3.7578352e-01, 3.6419688e-01, 8.5214282e-01]
        ,[ 4.8869777e-01, 2.9302019e-01, 8.2177470e-01]
        ,[-2.4120305e-01,-5.5445528e-01, 7.9649258e-01]
        ,[ 4.2377912e-01,-4.4257123e-01, 7.9027968e-01]
        ,[ 2.1348793e-01,-5.7868574e-01, 7.8711227e-01]
        ,[-5.8408210e-01, 2.3736845e-01, 7.7621152e-01]
        ,[ 3.8248875e-01, 5.0389038e-01, 7.7446552e-01]
        ,[-6.3958780e-01,-2.9731327e-02, 7.6814289e-01]
        ,[-4.6912463e-01,-4.3948223e-01, 7.6601400e-01]
        ,[-3.2875491e-02, 6.5426145e-01, 7.5555354e-01]
        ,[-2.9020894e-01, 6.1568418e-01, 7.3260614e-01]
        ,[-5.4881067e-03,-6.8659720e-01, 7.2701731e-01]
        ,[ 6.9165523e-01,-5.8845341e-02, 7.1982655e-01]
        ,[ 6.9438067e-01, 1.9465379e-01, 6.9278091e-01]
        ,[ 6.5286432e-01,-3.0736372e-01, 6.9231187e-01]
        ,[-6.6174423e-01,-2.8889910e-01, 6.9183227e-01]
        ,[ 2.2228962e-01, 6.8794069e-01, 6.9088706e-01]
        ,[-5.1460475e-01, 5.1688727e-01, 6.8411220e-01]
        ,[ 6.2345600e-01, 4.4677141e-01, 6.4163692e-01]
        ,[-2.2873683e-01,-7.4588946e-01, 6.2556244e-01]
        ,[ 3.7850171e-01,-6.9156052e-01, 6.1520769e-01]
        ,[ 5.7733304e-01,-5.3928429e-01, 6.1307342e-01]
        ,[-7.8107368e-01, 1.4106048e-01, 6.0829750e-01]
        ,[-4.5664804e-01,-6.5150156e-01, 6.0582034e-01]
        ,[-7.0470245e-01, 3.8107760e-01, 5.9847667e-01]
        ,[ 4.8276771e-01, 6.5760065e-01, 5.7835691e-01]
        ,[-8.1094529e-01,-1.0762291e-01, 5.7513915e-01]
        ,[ 1.6200650e-01,-8.0405343e-01, 5.7205941e-01]
        ,[ 2.7268650e-02, 8.2136926e-01, 5.6974465e-01]
        ,[-2.2720607e-01, 7.9656127e-01, 5.6023883e-01]
        ,[-6.5602119e-01,-5.1681897e-01, 5.5003123e-01]
        ,[ 8.4804754e-01, 6.2353457e-02, 5.2623893e-01]
        ,[ 8.2557865e-01,-2.0898205e-01, 5.2416256e-01]
        ,[-4.6731116e-01, 7.1745402e-01, 5.1660431e-01]
        ,[ 8.0506281e-01, 3.3779210e-01, 4.8761702e-01]
        ,[ 3.1074612e-01, 8.1936953e-01, 4.8173688e-01]
        ,[-6.9870698e-02,-8.7428712e-01, 4.8035416e-01]
        ,[ 7.5846089e-01,-4.6093128e-01, 4.6073793e-01]
        ,[-8.1845338e-01,-3.4657305e-01, 4.5828068e-01]
        ,[-6.7653931e-01, 5.8770839e-01, 4.4372673e-01]
        ,[ 6.8949047e-01, 5.8805367e-01, 4.2284249e-01]
        ,[-3.4217674e-01,-8.4388282e-01, 4.1325157e-01]
        ,[ 5.8617349e-01,-6.9730639e-01, 4.1250993e-01]
        ,[-9.1191639e-01, 1.2658203e-01, 3.9036584e-01]
        ,[ 3.7049529e-01,-8.4344834e-01, 3.8900917e-01]
        ,[-8.4258073e-01, 3.7257439e-01, 3.8890363e-01]
        ,[-5.7228937e-01,-7.2941528e-01, 3.7475090e-01]
        ,[ 1.1573999e-01, 9.2669802e-01, 3.5754027e-01]
        ,[-9.2810206e-01,-1.2817146e-01, 3.4956924e-01]
        ,[-1.3886650e-01, 9.2686546e-01, 3.4876426e-01]
        ,[ 1.3020005e-01,-9.3407614e-01, 3.3249016e-01]
        ,[ 5.3098018e-01, 7.7955952e-01, 3.3218519e-01]
        ,[ 9.4018581e-01,-8.9872271e-02, 3.2859339e-01]
        ,[-3.8362982e-01, 8.6679709e-01, 3.1857648e-01]
        ,[ 9.2914912e-01, 1.9849690e-01, 3.1189886e-01]
        ,[-7.6170309e-01,-5.7276572e-01, 3.0289905e-01]
        ,[ 8.9136091e-01,-3.5509316e-01, 2.8175269e-01]
        ,[ 8.4285399e-01, 4.7279568e-01, 2.5702411e-01]
        ,[-6.0815278e-01, 7.5109141e-01, 2.5692777e-01]
        ,[-1.6133850e-01,-9.5437406e-01, 2.5127683e-01]
        ,[ 7.5495026e-01,-6.1107640e-01, 2.3798264e-01]
        ,[ 3.2960882e-01, 9.1813758e-01, 2.1995773e-01]
        ,[-9.0052534e-01,-3.8219627e-01, 2.0731647e-01]
        ,[-7.9860750e-01, 5.6695721e-01, 2.0195442e-01]
        ,[ 5.5403589e-01,-8.1222171e-01, 1.8259279e-01]
        ,[-4.4102399e-01,-8.7919268e-01, 1.8032766e-01]
        ,[ 7.0896842e-01, 6.8682010e-01, 1.6013098e-01]
        ,[-9.2951317e-01, 3.3437943e-01, 1.5554957e-01]
        ,[-9.8550238e-01, 8.5294017e-02, 1.4666283e-01]
        ,[ 3.1867263e-01,-9.3730176e-01, 1.4111399e-01]
        ,[ 4.0145140e-02, 9.9080527e-01, 1.2920253e-01]
        ,[-6.6691723e-01,-7.3584520e-01, 1.1727422e-01]
        ,[ 9.9248679e-01, 4.0295520e-02, 1.1552596e-01]
        ,[-2.3186692e-01, 9.6699355e-01, 1.0564664e-01]
        ,[-9.8076194e-01,-1.6434800e-01, 1.0533640e-01]
        ,[ 4.8499498e-02,-9.9371152e-01, 1.0092185e-01]
        ,[ 9.7137492e-01,-2.2271177e-01, 8.2645260e-02]
        ,[ 9.4070313e-01, 3.2975056e-01, 7.9637870e-02]
        ,[ 5.2051352e-01, 8.5136385e-01, 6.5155678e-02]
        ,[-4.8139557e-01, 8.7415710e-01, 6.4091091e-02]
        ,[ 8.7131249e-01,-4.8842652e-01, 4.7477167e-02]
        ,[-8.3297408e-01,-5.5288134e-01, 2.1826623e-02]
        ,[-2.5447264e-01,-9.6690830e-01, 1.8221396e-02]
        ,[-7.0347100e-01, 7.1070605e-01, 5.0461141e-03]])

    # Loop through the first three dimensions
    ex = np.arange(Ps1.shape[2])
    for i in range(3):
        Ai0 = np.min(Ps1[i, 0:2, ex], axis=1)
        Bi0 = np.max(Ps1[i, 0:2, ex], axis=1)
        Ai1 = np.min(Ps1[i, 2:4, ex], axis=1)
        Bi1 = np.max(Ps1[i, 2:4, ex], axis=1)

        Aj0 = np.min(Ps2[i, 0:2, ex], axis=1)
        Bj0 = np.max(Ps2[i, 0:2, ex], axis=1)
        Aj1 = np.min(Ps2[i, 2:4, ex], axis=1)
        Bj1 = np.max(Ps2[i, 2:4, ex], axis=1)

        tmp1 = ((Bi0 < Aj0) * (Bi1 < Aj1) + (Bj0 < Ai0) * (Bj1 < Ai1)) > 0
        # out1 = np.sum(tmp1)
        out1 = tmp1
        index[ex] = out1
        ex = np.where(index == 0)[0]

    # Perform tensor product with V20 and V (set to np.nan)
    Sprod1 = np.tensordot(V20, Ps1[:, :, ex], axes=(1, 0))
    Sprod2 = np.tensordot(V20, Ps2[:, :, ex], axes=(1, 0))

    Ai0 = np.min(Sprod1[:, 0:2, :], axis=1)
    Bi0 = np.max(Sprod1[:, 0:2, :], axis=1)
    Ai1 = np.min(Sprod1[:, 2:4, :], axis=1)
    Bi1 = np.max(Sprod1[:, 2:4, :], axis=1)

    Aj0 = np.min(Sprod2[:, 0:2, :], axis=1)
    Bj0 = np.max(Sprod2[:, 0:2, :], axis=1)
    Aj1 = np.min(Sprod2[:, 2:4, :], axis=1)
    Bj1 = np.max(Sprod2[:, 2:4, :], axis=1)

    tmp1 = ((Bi0 < Aj0) * (Bi1 < Aj1) + (Bj0 < Ai0) * (Bj1 < Ai1)) > 0
    out1 = np.sum(tmp1, axis=0)
    index[ex] = out1
    ex = np.where(index == 0)[0]

    Sprod1 = np.tensordot(V, Ps1[:, :, ex], axes=(1, 0))
    Sprod2 = np.tensordot(V, Ps2[:, :, ex], axes=(1, 0))

    Ai0 = np.min(Sprod1[:, 0:2, :], axis=1)
    Bi0 = np.max(Sprod1[:, 0:2, :], axis=1)
    Ai1 = np.min(Sprod1[:, 2:4, :], axis=1)
    Bi1 = np.max(Sprod1[:, 2:4, :], axis=1)

    Aj0 = np.min(Sprod2[:, 0:2, :], axis=1)
    Bj0 = np.max(Sprod2[:, 0:2, :], axis=1)
    Aj1 = np.min(Sprod2[:, 2:4, :], axis=1)
    Bj1 = np.max(Sprod2[:, 2:4, :], axis=1)

    tmp1 = ((Bi0 < Aj0) * (Bi1 < Aj1) + (Bj0 < Ai0) * (Bj1 < Ai1)) > 0
    out1 = np.sum(tmp1, axis=0)
    index[ex] = out1
    out = np.where(index == 0)[0]

    return out



# # Example usage

# import scipy.io

# # Load the .mat file
# data = scipy.io.loadmat('PsData.mat')

# # Extract Ps1 and Ps2
# Ps1 = data['Ps1']  # Ps1 will have the same shape as in MATLAB
# Ps2 = data['Ps2']  # Ps2 will have the same shape as in MATLAB

# # Print the shapes to verify
# print("Shape of Ps1:", Ps1.shape)  # Should match MATLAB shape (3, 4, 22)
# print("Shape of Ps2:", Ps2.shape)  # Should match MATLAB shape (3, 4, 22)

# # Call the ProjectionCheck function
# result = ProjectionCheck(Ps1, Ps2)

# # Print the result
# print("Indices where projection check failed:", result)
